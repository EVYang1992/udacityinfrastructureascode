Description:
  Devin Yang / Udacity Udagramm Project
  This script deploys the aws servers for Udagramm project.

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http traffic to our load balancer
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0

    WebServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http traffic to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            -   IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://udacitydevin/index.html /var/www/html
            ImageId: ami-0b37e9efc396e4c38  # Ubuntu 18.0.4 LTS, AZ: us-west-2
            # KeyName: UdagrammDevin # SSH Key value
            SecurityGroups:
            -   !Ref WebServerSecurityGroup
            InstanceType: t3.medium # 2 vCPU, 4 GB RAM
            BlockDeviceMappings:
            -   DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: '10' # 10GB disk space

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            -   Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName: !Ref WebAppLaunchConfig
            MinSize: '1'
            MaxSize: '2'
            TargetGroupARNs:
            -   !Ref WebAppTargetGroup

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

    WebAppLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
            -   !Ref LoadBalancerSecurityGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            -   Type: forward
                TargetGroupArn: 
                    !Ref WebAppTargetGroup
            LoadBalancerArn: !Ref WebAppLoadBalancer
            Port: 80
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            -   Type: forward
                TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
            -   Field: path-pattern
                Values: [/]
            ListenerArn: !Ref Listener
            Priority: 1


Outputs:
    WebAppLoadBalancerDNSName:
        Description: DNS name or Public URL of the Load Balancer
        Value: !Join [ "", [ 'http://', !GetAtt WebAppLoadBalancer.DNSName ]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName